/* Chapter 4: Aggregate window functions and frames */

-- Aggregate window functions 
WITH Medals AS(...)

SELECT 
	Year, Medals
	MAX(Medals)
		OVER (ORDER BY Year ASC) AS Max_Medals
FROM Medals; 

WITH Medals AS(...)

SELECT 
	Year, Medals
	SUM(Medals) OVER (ORDER BY Year ASC) AS Medals_RT
FROM Medals; 


WITH Medals AS(...)
SELECT Year, Country, Medals,
	SUM(Medals) OVER (PARTITION BY Country ...)
FROM Medals; 

WITH Athlete_Medals AS (
  SELECT
    Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country = 'USA' AND Medal = 'Gold'
    AND Year >= 2000
  GROUP BY Athlete)

SELECT
  -- Calculate the running total of athlete medals
  Athlete,
  Medals,
  SUM(Medals) OVER (ORDER BY Athlete ASC) AS Max_Medals
FROM Athlete_Medals
ORDER BY Athlete ASC;

WITH Country_Medals AS (
  SELECT
    Year, Country, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country IN ('CHN', 'KOR', 'JPN')
    AND Medal = 'Gold' AND Year >= 2000
  GROUP BY Year, Country)

SELECT
  -- Return the max medals earned so far per country
  Year,
  Country,
  Medals,
  MAX(Medals) OVER (PARTITION BY Country
                ORDER BY Year ASC) AS Max_Medals
FROM Country_Medals
ORDER BY Country ASC, Year ASC;

WITH France_Medals AS (
  SELECT
    Year, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country = 'FRA'
    AND Medal = 'Gold' AND Year >= 2000
  GROUP BY Year)

SELECT
  Year,
  Medals,
  MIN(medals) OVER (ORDER BY Year ASC) AS Min_Medals
FROM France_Medals
ORDER BY Year ASC; 

-- Frame
LAST_VALUE(City) OVER ( 
	ORDER BY Year ASC
	RANGE BETWEEN 
		UNBOUNDED PRECEDING AND 
UNBOUNDED FOLLOWING
) AS Last_City; 

SELECT 
	Year, COUNT(*) AS Medals
FROM Summer_Medals 
WHERE
	Country = 'RUS'
	AND Medal = 'Gold'
GROUP BY Year
ORDER BY Year ASC; 

WITH Russia_Medals AS (...)

SELECT
	Year, Medals
	MAX(Medals)
		OVER (ORDER BY Year ASC) AS Max_Medals
FROM Russia_Medals
ORDER BY Year ASC; 

WITH Russia_Medals AS (...)

SELECT
	Year, Medals
	MAX(Medals)
		OVER (ORDER BY Year ASC) AS Max_Medals,
	MAX(Medals) 
		OVER (ORDER BY Year ASC
			 ROWS BETWEEN 
			 1 PRECEDING AND CURRENT ROW)
		AS Max_Medals_Last
FROM Russia_Medals
ORDER BY Year ASC; 

WITH Russia_Medals AS (...)

SELECT
	Year, Medals
	MAX(Medals)
		OVER (ORDER BY Year ASC
			 ROWS BETWEEN 
			  CURRENT ROW AND 1 FOLLOWING)
		AS Max_Medals_Next
FROM Russia_Medals
ORDER BY Year ASC; 

WITH Scandinavian_Medals AS (
  SELECT
    Year, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country IN ('DEN', 'NOR', 'FIN', 'SWE', 'ISL')
    AND Medal = 'Gold'
  GROUP BY Year)

SELECT
  -- Select each year's medals
  Year,
  Medals,
  -- Get the max of the current and next years'  medals
  MAX(Medals) OVER (ORDER BY Year ASC
             ROWS BETWEEN CURRENT ROW
             AND 1 FOLLOWING) AS Max_Medals
FROM Scandinavian_Medals
ORDER BY Year ASC; 

WITH Chinese_Medals AS (
  SELECT
    Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country = 'CHN' AND Medal = 'Gold'
    AND Year >= 2000
  GROUP BY Athlete)

SELECT
  -- Select the athletes and the medals they've earned
  Athlete,
  Medals,
  -- Get the max of the last two and current rows' medals 
  MAX(Medals) OVER (ORDER BY Athlete ASC
                    ROWS BETWEEN 2 PRECEDING
                    AND CURRENT ROW) AS Max_Medals
FROM Chinese_Medals
ORDER BY Athlete ASC; 

-- Moving averages and totals
SELECT 
	Year, COUNT(*) AS Medals
FROM Summer_Medals 
WHERE
	Country = 'USA'
	AND Medal = 'Gold'
	AND Year >= 1980
GROUP BY Year
ORDER BY Year ASC; 

WITH US_Medals AS (...)
SELECT 
	Year, Medals,
	AVG(Medals) OVER
	(ORDER BY Year ASC
	ROWS BETWEEN 
	2 PRECEDING AND CURRENT ROWS) AS Medals_MA
	FROM US_Medals 
ORDER BY Year ASC; 

WITH US_Medals AS (...)
SELECT 
	Year, Medals,
	SUM(Medals) OVER
	(ORDER BY Year ASC
	ROWS BETWEEN 
	2 PRECEDING AND CURRENT ROWS) AS Medals_MT
	FROM US_Medals 
ORDER BY Year ASC; 

WITH Russian_Medals AS (
  SELECT
    Year, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country = 'RUS'
    AND Medal = 'Gold'
    AND Year >= 1980
  GROUP BY Year)

SELECT
  Year, Medals,
  --- Calculate the 3-year moving average of medals earned
  AVG(Medals) OVER
    (ORDER BY Year ASC
     ROWS BETWEEN
     2 PRECEDING AND CURRENT ROW) AS Medals_MA
FROM Russian_Medals
ORDER BY Year ASC;

WITH Country_Medals AS (
  SELECT
    Year, Country, COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Year, Country)

SELECT
  Year, Country, Medals,
  -- Calculate each country's 3-game moving total
  SUM(Medals) OVER
    (PARTITION BY Country
     ORDER BY Year ASC
     ROWS BETWEEN
     2 PRECEDING AND CURRENT ROW) AS Medals_MA
FROM Country_Medals
ORDER BY Country ASC, Year ASC; 

-- Chapter 4: Additional syntax
-- Pivoting 

CREATE EXTENSION IF NOT EXISTS tablefunc; 

SELECT * FROM CCROSSTAB($$
	source_sql TEXT 
$$) AS ct (column_1 DATA_TYPE_1
		  column_2 DATA_TYPE_2,
		  column_3 DATA_TYPE_3
		  ...,
		  column_n DATA_TYPE_N)
--
WITH Country_Awards AS ( 
	SELECT 
		Country, Year, COUNT(*) AS Awards 
	FROM Summer_Medals
	WHERE
		Country IN  ('CHN', 'RUS', 'USA')
		AND YEAR IN (2004, 2008, 2012)
		AND Medal = 'Gold' AND Sport = 'Gymnastics'
	GROUP BY Country, Year
	ORDER BY Country ASC, Year ASC)
	
SELECT 
	Country, Year
	RANK() OVER
	(PARTITION BY Year ORDER BY Awards DESC) :: INTEGER
	AS rank 
FROM Country_Awards 
ORDER BY Country ASC, Year ASC; 
--

CREATE EXTENSION IF NOT EXISTS tasblefunc; 

SELECT * FROM CROSSTAB($$
	...
$$) AS ct (Country VARCHAR,
		  "2004" INTEGER,
		  "2008" INTEGER, 
		  "2012" INTEGER)

ORDER BY Country ASC; 


-- Create the correct extension to enable CROSSTAB
CREATE EXTENSION IF NOT EXISTS tablefunc;

SELECT * FROM CROSSTAB($$
  SELECT
    Gender, Year, Country
  FROM Summer_Medals
  WHERE
    Year IN (2008, 2012)
    AND Medal = 'Gold'
    AND Event = 'Pole Vault'
  ORDER By Gender ASC, Year ASC;
-- Fill in the correct column names for the pivoted table
$$) AS ct (Gender VARCHAR,
           "2008" VARCHAR,
           "2012" VARCHAR)

ORDER BY Gender ASC;

-- Count the gold medals per country and year
SELECT
  Country,
  Year,
  COUNT(*) AS Awards
FROM Summer_Medals
WHERE
  Country IN ('FRA', 'GBR', 'GER')
  AND Year IN (2004, 2008, 2012)
  AND Medal = 'Gold'
GROUP BY Country, Year
ORDER BY Country ASC, Year ASC

WITH Country_Awards AS (
  SELECT
    Country,
    Year,
    COUNT(*) AS Awards
  FROM Summer_Medals
  WHERE
    Country IN ('FRA', 'GBR', 'GER')
    AND Year IN (2004, 2008, 2012)
    AND Medal = 'Gold'
  GROUP BY Country, Year)

SELECT
  -- Select Country and Year
  Country,
  Year,
  -- Rank by gold medals earned per year
  RANK() OVER
  (PARTITION BY Year ORDER BY Awards DESC) :: INTEGER AS rank
FROM Country_Awards
ORDER BY Country ASC, Year ASC; 

CREATE EXTENSION IF NOT EXISTS tablefunc;

SELECT * FROM CROSSTAB($$
  WITH Country_Awards AS (
    SELECT
      Country,
      Year,
      COUNT(*) AS Awards
    FROM Summer_Medals
    WHERE
      Country IN ('FRA', 'GBR', 'GER')
      AND Year IN (2004, 2008, 2012)
      AND Medal = 'Gold'
    GROUP BY Country, Year)

  SELECT
    Country,
    Year,
    RANK() OVER
      (PARTITION BY Year
       ORDER BY Awards DESC) :: INTEGER AS rank
  FROM Country_Awards
  ORDER BY Country ASC, Year ASC;
-- Fill in the correct column names for the pivoted table
$$) AS ct (Country VARCHAR,
           "2004" INTEGER,
           "2008" INTEGER,
           "2012" INTEGER)

Order by Country ASC; 

-- ROLLUP and CUBE 
SELECT 
	Country, Medal, COUNT(*) AS Awards
FROM Summer_Medals
WHERE
	Year = 2008 AND Country IN ()'CHN', 'RUS')
GROUP BY Country, ROLLUP(Medal)
ORDER BY Country ASC, Medal ASC; 

SELECT 
	Country, Medal, COUNT(*) AS Awards
FROM Summer_Medals
WHERE
	Year = 2008 AND Country IN ()'CHN', 'RUS')
GROUP BY ROLLUP(Country, Medal)
ORDER BY Country ASC, Medal ASC; 

SELECT 
	Country, Medal, COUNT(*) AS Awards
FROM summer_medals 
WHERE 
	Year = 2008 AND Country IN ('CHN', 'RUS')
GROUP BY CUBE(Country, Medal)
ORDER BY Country ASC, Medal ASC; 

-- Count the gold medals per country and gender
SELECT
  Country,
  Gender,
  COUNT(*) AS Gold_Awards
FROM Summer_Medals
WHERE
  Year = 2004
  AND Medal = 'Gold'
  AND Country IN ('DEN', 'NOR', 'SWE')
-- Generate Country-level subtotals
GROUP BY Country, ROLLUP(Gender)
ORDER BY Country ASC, Gender ASC; 

-- Count the medals per gender and medal type
SELECT
  Gender,
  Medal,
  COUNT(*) AS Awards
FROM Summer_Medals
WHERE
  Year = 2012
  AND Country = 'RUS'
-- Get all possible group-level subtotals
GROUP BY CUBE(Gender, Medal)
ORDER BY Gender ASC, Medal ASC; 

--COALESCE 
SELECT 
	COALESCE(Country, 'Both countries') AS Country,
	COALESCE(Medal, 'All medals') AS Medal,
	COUNT(*) AS Awards
FROM summer_medals
WHERE 
	Year = 2008 AND Country IN ('CHN', 'RUS')
GROUP BY ROLLUP(Country, Medal)
ORDER BY Country ASC, Medal ASC; 
	
--STRING_AGG
WITH Country_Medals AS (...)
	Country_Ranks AS (...)
	
	SELECT STRING_AGG(Country, ',')
	FROM Country_Medals; 
	
SELECT
  -- Replace the nulls in the columns with meaningful text
  COALESCE(Country, 'All countries') AS Country,
  COALESCE(Gender, 'All genders') AS Gender,
  COUNT(*) AS Awards
FROM Summer_Medals
WHERE
  Year = 2004
  AND Medal = 'Gold'
  AND Country IN ('DEN', 'NOR', 'SWE')
GROUP BY ROLLUP(Country, Gender)
ORDER BY Country ASC, Gender ASC; 

WITH Country_Medals AS (
  SELECT
    Country,
    COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE Year = 2000
    AND Medal = 'Gold'
  GROUP BY Country)

  SELECT
    Country,
    -- Rank countries by the medals awarded
    RANK () OVER(ORDER BY Medals DESC) AS Rank
  FROM Country_Medals
  ORDER BY Rank ASC; 
  
WITH Country_Medals AS (
  SELECT
    Country,
    COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE Year = 2000
    AND Medal = 'Gold'
  GROUP BY Country),

  Country_Ranks AS (
  SELECT
    Country,
    RANK() OVER (ORDER BY Medals DESC) AS Rank
  FROM Country_Medals
  ORDER BY Rank ASC)

-- Compress the countries column
SELECT STRING_AGG(Country, ', ')
FROM Country_Ranks
-- Select only the top three ranks
WHERE Rank <= 3; 
