--Chapter 1: Intro to window fuctions 

SELECT 
	Year, Event, Country 
FROM Summer_Medals
WHERE
	Metal = 'Gold'; 
	
SELECT
	Year, Event, Country
	ROW_NUMBER() OVER() AS Row_N
FROM Summer_Medals
WHERE
	Medal = 'Gold'

SELECT
  *,
  -- Assign numbers to each row
  ROW_NUMBER() OVER() AS Row_N
FROM Summer_Medals
ORDER BY Row_N ASC; 

SELECT
  *,
  -- Assign numbers to each row
  ROW_NUMBER() OVER() AS Row_N
FROM Summer_Medals
ORDER BY Row_N ASC; 

--Order By 
SELECT 
	Year, Event, Country 
	ROW_NUMBER() OVER
	(ORDER BY Year DESC, Event ASC) AS Row_N
FROM Summer_Medals
WHERE
	Metal = 'Gold'; 

SELECT 
	Year, Event, Country 
	ROW_NUMBER() OVER
	(ORDER BY Year DESC, Event ASC) AS Row_N
FROM Summer_Medals
WHERE
	Metal = 'Gold'
ORDER BY Country ASC, Row_N ASC; 

SELECT 
	Year, Country AS Champion
FROM Summer_Medals
WHERE
	YEAR IN (1996, 2000, 2004, 2008, 2012)
	AND Gender = 'Men' AND Medal = 'Gold'
	AND Event = 'Discus Throw'

WITH Discus_Gold AS ( 
	SELECT
		Year, Country AS Champion 
	FROM Summer_Medals
	WHERE
		Year IN (1996, 2000, 2004, 2008, 2012) 
		AND Gender = 'Men' AND Medal = 'Gold' 
		AND Event = 'Discus Throw')

SELECT 
	Year, Champion 
	LAG(Champion, 1) OVER 
	(ORDER BY Year ASC) AS Last_Champion 
FROM Discus_Gold
ORDER BY Year ASC; 

SELECT
  Year,
  -- Assign the lowest numbers to the most recent years
  ROW_NUMBER() OVER (ORDER BY year DESC) AS Row_N
FROM (
  SELECT DISTINCT Year
  FROM Summer_Medals
) AS Years
ORDER BY Year; 

SELECT
  -- Count the number of medals each athlete has earned
  athlete,
  COUNT(medal) AS Medals
FROM Summer_Medals
GROUP BY Athlete
ORDER BY Medals DESC; 

WITH Athlete_Medals AS (
  SELECT
    -- Count the number of medals each athlete has earned
    Athlete,
    COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Athlete)

SELECT
  -- Number each athlete by how many medals they've earned
  athlete,
  ROW_NUMBER() OVER (ORDER BY medals DESC) AS Row_N
FROM Athlete_Medals
ORDER BY Medals DESC; 

SELECT
  -- Return each year's champions' countries
  year,
  Country AS champion
FROM Summer_Medals
WHERE
  Discipline = 'Weightlifting' AND
  Event = '69KG' AND
  Gender = 'Men' AND
  Medal = 'Gold'; 
  
WITH Weightlifting_Gold AS (
  SELECT
    -- Return each year's champions' countries
    Year,
    Country AS champion
  FROM Summer_Medals
  WHERE
    Discipline = 'Weightlifting' AND
    Event = '69KG' AND
    Gender = 'Men' AND
    Medal = 'Gold')

SELECT
  Year, Champion,
  -- Fetch the previous year's champion
  LAG(Champion) OVER
    (ORDER BY Year ASC) AS Last_Champion
FROM Weightlifting_Gold
ORDER BY Year ASC; 

-- Parition By 
WITH Country_Gold AS ( 
	SELECT 
		DISTINCT Year, Country, Event 
	FROM Summer_Medals 
	WHERE 
		Year IN (2008, 2012)
		AND Country IN ('CHN', 'JPN')
		AND Gedner = 'Women' AND Medal = 'Gold')

SELECT 
	Year, Country, Event
	ROW_NUMBER() OVER (PARTITION BY Year, Country)
FROM Country_Gold; 

WITH Tennis_Gold AS (
  SELECT DISTINCT
    Gender, Year, Country
  FROM Summer_Medals
  WHERE
    Year >= 2000 AND
    Event = 'Javelin Throw' AND
    Medal = 'Gold')

SELECT
  Gender, Year,
  Country AS Champion,
  -- Fetch the previous year's champion by gender
  LAG(Country) OVER (PARTITION BY Gender
                         ORDER BY Year ASC) AS Last_Champion
FROM Tennis_Gold
ORDER BY Gender ASC, Year ASC;

WITH Athletics_Gold AS (
  SELECT DISTINCT
    Gender, Year, Event, Country
  FROM Summer_Medals
  WHERE
    Year >= 2000 AND
    Discipline = 'Athletics' AND
    Event IN ('100M', '10000M') AND
    Medal = 'Gold')

SELECT
  Gender, Year, Event,
  Country AS Champion,
  -- Fetch the previous year's champion by gender and event
  LAG(Country) OVER (PARTITION BY Gender, Event
                         ORDER BY Year ASC) AS Last_Champion
FROM Athletics_Gold
ORDER BY Event ASC, Gender ASC, Year ASC; 

-- Fetching, Ranking and Paging 
WITH Hosts AS ( 
	SELECT DISTINCT Year, City 
	FROM Summer_Medals) 

SELECT 
	Year, City
	LEAD(City, 1) OVER (ORDER BY Year ASC)
	AS Next_City,
	LEAD(City, 2) OVER (ORDER BY Year ASC)
	AS After_Next_City 
FROM Hosts
ORDER BY Year ASC; 

SELECT 
	Year, City, 
	FIRST_VALUE(City) OVER
	(ORDER BY Year ASC) AS First_City,
	LAST_VALUE(City) OVER( 
		ORDER BY Year ASC 
		RANGE BETWEEN 
			UNBOUNDED PRECEDING AND
			UNBOUNDED FOLLOWING 
	) AS Last_City 
FROM Hosts
ORDER BY Year ASC; 

WITH Discus_Medalists AS (
  SELECT DISTINCT
    Year,
    Athlete
  FROM Summer_Medals
  WHERE Medal = 'Gold'
    AND Event = 'Discus Throw'
    AND Gender = 'Women'
    AND Year >= 2000)

SELECT
  -- For each year, fetch the current and future medalists
  year,
  athlete,
  LEAD(athlete, 3) OVER (ORDER BY year ASC) AS Future_Champion
FROM Discus_Medalists
ORDER BY Year ASC;

WITH All_Male_Medalists AS (
  SELECT DISTINCT
    Athlete
  FROM Summer_Medals
  WHERE Medal = 'Gold'
    AND Gender = 'Men')

SELECT
  -- Fetch all athletes and the first athlete alphabetically
  athlete,
  FIRST_VALUE(athlete) OVER (
    ORDER BY athlete ASC
  ) AS First_Athlete
FROM All_Male_Medalists; 

WITH Hosts AS (
  SELECT DISTINCT Year, City
    FROM Summer_Medals)

SELECT
  Year,
  City,
  -- Get the last city in which the Olympic games were held
  LAST_VALUE(city) OVER (
   ORDER BY year ASC
   RANGE BETWEEN
     UNBOUNDED PRECEDING AND
     UNBOUNDED FOLLOWING
  ) AS Last_City
FROM Hosts
ORDER BY Year ASC; 

-- Ranking 
SELECT
	Country, COUNT(DISTINCT Year) AS Games
FROM Summer_Medals
WHERE
	Country IN ('GBR', 'DEN', 'FRA', 
			   'ITA', 'AUT', 'BEL', 
			   'NOR', 'POL', 'ESP')
GROUP BY Country 
ORDER BY Games DESC; 

WITH Country_Games AS (...)

SELECT 
	Country, Games, 
	ROW_NUMBER() 
		OVER (ORDER BY Games DESC) AS Row_N
FROM country_Games
ORDER BY Games DESC, Country ASC; 

WITH Country_Games AS (...)

SELECT 
	Country, Games, 
	ROW_NUMBER() 
		OVER (ORDER BY Games DESC) AS Row_N,
	RANK()
		OVER (ORDER BY Games DESC) AS Rank_N,
FROM country_Games
ORDER BY Games DESC, Country ASC; 

WITH Country_Games AS (...)

SELECT 
	Country, Games, 
	ROW_NUMBER() 
		OVER (ORDER BY Games DESC) AS Row_N,
	RANK()
		OVER (ORDER BY Games DESC) AS Rank_N,
	DENSE_RANK()
		OVER (ORDER BY Games DESC) AS Dense_Rank_N
FROM country_Games
ORDER BY Games DESC, Country ASC; 

SELECT
	Country, Athlete, COUNT(*) AS Medals
FROM Summer_Medals
WHERE 
	Country IN ('CHN', 'RUS')
	AND Year = 2012
GROUP BY Country, Athlete 
HAVING COUNT(*) > 1
ORDER BY Country ASC, Medals DESC; 

WITH Country_Medals AS (...)

SELECT 
	Cuntry, Athlete, Medals,
	DENSE_RANK()
		OVER (ORDER BY Medals DESC) AS Rank_N
FROM Country_Medals 
ORDER BY Country ASC, Medals DESC; 

WITH Athlete_Medals AS (
  SELECT
    Athlete,
    COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Athlete)

SELECT
  Athlete,
  Medals,
  -- Rank athletes by the medals they've won
  RANK() OVER (ORDER BY Medals DESC) AS Rank_N
FROM Athlete_Medals
ORDER BY Medals DESC;

WITH Athlete_Medals AS (
  SELECT
    Country, Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country IN ('JPN', 'KOR')
    AND Year >= 2000
  GROUP BY Country, Athlete
  HAVING COUNT(*) > 1)

SELECT
  Country,
  -- Rank athletes in each country by the medals they've won
  athlete,
  DENSE_RANK() OVER (PARTITION BY country
                ORDER BY Medals DESC) AS Rank_N
FROM Athlete_Medals
ORDER BY Country ASC, RANK_N ASC; 

-- Paging 
WITH Disciplines AS ( 
	SELECT 
		DISTINCT Discipline 
	FROM Summer_Medals)
	
SELECT 
	Discipline, NTITLE(15) OVER() AS Page 
FROM Discplines 
ORDER BY Page ASC; 

WITH Country_Medals AS ( 
	SELECT 
		Country, COUNT(*) AS Medals
	FROM Summer_Medals 
	GROUP BY Country),

SELECT Country, Medals
	NTITLE(3) OVER (ORDER BY Medals DESC) AS Thrid
FROM Country_Medals; 

-- Third Averages 
WITH Country_Medals AS (..), 

	Thirds AS ( 
	SELECT 
		Country, Medals 
		NTITLE(3) OVER (ORDER BY Medals DESC) AS Third 
	FROM Country_Medals)

SELECT 
	Third,
	ROUND(AVG(Medals), 2) AS Avg_Medals
FROM Thirds
GROUP BY Third
ORDER BY Third ASC; 

WITH Events AS (
  SELECT DISTINCT Event
  FROM Summer_Medals)
  
SELECT
  --- Split up the distinct events into 111 unique groups
  DISTINCT event,
  NTILE(111) OVER (ORDER BY event ASC) AS Page
FROM Events
ORDER BY Event ASC; 

WITH Athlete_Medals AS (
  SELECT Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Athlete
  HAVING COUNT(*) > 1)
  
SELECT
  Athlete,
  Medals,
  -- Split athletes into thirds by their earned medals
  NTILE(3) OVER (ORDER BY Medals DESC) AS Third
FROM Athlete_Medals
ORDER BY Medals DESC, Athlete ASC; 

WITH Athlete_Medals AS (
  SELECT Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Athlete
  HAVING COUNT(*) > 1),
  
  Thirds AS (
  SELECT
    Athlete,
    Medals,
    NTILE(3) OVER (ORDER BY Medals DESC) AS Third
  FROM Athlete_Medals)
  
SELECT
  -- Get the average medals earned in each third
  Third,
  AVG(Medals) AS Avg_Medals
FROM Thirds
GROUP BY Third
ORDER BY Third ASC;
